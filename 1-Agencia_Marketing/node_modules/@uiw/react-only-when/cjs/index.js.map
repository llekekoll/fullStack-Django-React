{
  "version": 3,
  "sources": [
    "../src/index.tsx"
  ],
  "names": [
    "OnlyWhen",
    "props",
    "children",
    "when",
    "hiddenMode",
    "className",
    "singleChild",
    "React",
    "Children",
    "only",
    "style",
    "restOfChildProps",
    "extendedProps",
    "keepNode",
    "trim",
    "display",
    "visibility",
    "cloned",
    "cloneElement",
    "toHide"
  ],
  "mappings": ";;;;;;;;;;;;;AAAA;;;;AAmBe,SAASA,QAAT,CAAkBC,KAAlB,EAAwC;AACrD,MAAQC,QAAR,GAAkDD,KAAlD,CAAQC,QAAR;AAAA,MAAkBC,IAAlB,GAAkDF,KAAlD,CAAkBE,IAAlB;AAAA,MAAwBC,UAAxB,GAAkDH,KAAlD,CAAwBG,UAAxB;AAAA,MAAoCC,SAApC,GAAkDJ,KAAlD,CAAoCI,SAApC;;AACA,MAAMC,WAAW,GAAGC,eAAMC,QAAN,CAAeC,IAAf,CAAoBP,QAApB,CAApB;;AACA,2BAAuCI,WAAW,CAACL,KAAnD;AAAA,MAAQS,KAAR,sBAAQA,KAAR;AAAA,MAAkBC,gBAAlB;AACA,MAAMC,aAAa,mCAAQD,gBAAR,CAAnB;AAEA,MAAME,QAAQ,GAAGT,UAAU,IAAIA,UAAU,KAAK,MAA9C;;AACA,MAAIS,QAAJ,EAAc;AACZ,QAAIT,UAAU,KAAK,KAAnB,EAA0B;AACxBQ,MAAAA,aAAa,CAACP,SAAd,GAA0B,UAAGO,aAAa,CAACP,SAAd,IAA2B,EAA9B,cAAoCA,SAAS,IAAI,EAAjD,EAAsDS,IAAtD,EAA1B;AACD,KAFD,MAEO;AACLF,MAAAA,aAAa,CAACF,KAAd,2FACKA,KADL,GAEMN,UAAU,KAAK,SAAf,IAA4B;AAAEW,QAAAA,OAAO,EAAE;AAAX,OAFlC,GAGMX,UAAU,KAAK,YAAf,IAA+B;AAAEY,QAAAA,UAAU,EAAE;AAAd,OAHrC;AAKD;AACF;;AACD,MAAMC,MAAM,gBAAGV,eAAMW,YAAN,CAAmBZ,WAAnB,EAAgCM,aAAhC,CAAf;;AACA,MAAMO,MAAM,GAAGN,QAAQ,GAAGI,MAAH,GAAY,IAAnC;AAEA,SAAOd,IAAI,GAAGG,WAAH,GAAiBa,MAA5B;AACD",
  "sourcesContent": [
    "import React from 'react';\n\nexport interface OnlyWhenProps {\n  /** A single child element */\n  children: React.ReactElement;\n  /** When true, children will rendered as is */\n  when: boolean;\n  /** This is working in combination with hiddenMode={\"css\"} */\n  className?: string;\n  /**\n   * Determines how \"react-only-when\" should hide the child element\n   * \"null\": Will not render the child\n   * \"display\": Will render the child with display:none\n   * \"visibility\": Will render the child with visibility:hidden\n   * \"css\": Will render the child with a CSS class (you can pass it a custom className prop)\n   */\n  hiddenMode?: 'null' | 'display' | 'visibility' | 'css';\n}\n\nexport default function OnlyWhen(props: OnlyWhenProps) {\n  const { children, when, hiddenMode, className } = props;\n  const singleChild = React.Children.only(children);\n  const { style, ...restOfChildProps } = singleChild.props;\n  const extendedProps = { ...restOfChildProps };\n\n  const keepNode = hiddenMode && hiddenMode !== 'null';\n  if (keepNode) {\n    if (hiddenMode === 'css') {\n      extendedProps.className = `${extendedProps.className || ''} ${className || ''}`.trim();\n    } else {\n      extendedProps.style = {\n        ...style,\n        ...(hiddenMode === 'display' && { display: 'none' }),\n        ...(hiddenMode === 'visibility' && { visibility: 'hidden' }),\n      };\n    }\n  }\n  const cloned = React.cloneElement(singleChild, extendedProps);\n  const toHide = keepNode ? cloned : null;\n\n  return when ? singleChild : toHide;\n}\n"
  ]
}